[project]
name = "wisho"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [{ name = "Massimo Meert", email = "pro@masmeert.com" }]
requires-python = ">=3.13"
dependencies = [
    "asyncpg>=0.30.0",
    "fastapi[standard]>=0.120.1",
    "greenlet>=3.2.4",
    "edict_parser",
    "lxml>=6.0.2",
    "psycopg2-binary>=2.9.11",
    "pydantic>=2.12.3",
    "pydantic-settings>=2.11.0",
    "sqlalchemy>=2.0.44",
    "alembic>=1.17.1",
]

[project.scripts]
wisho = "wisho:main"

[build-system]
requires = ["uv_build>=0.9.5,<0.10.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "ruff>=0.14.2",
    "types-lxml>=2025.8.25",
    "pytest-asyncio>=1.0.0",
]

[tool.uv.sources]
edict_parser = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 4
target-version = "py311"
fix = true

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I",
    "UP",
    "N",
    "B",
    "A",
    "C4",
    "T10",
    "ARG",
    "PTH",
    "ANN", # type annotations
    "S",   # security best practices
    "BLE", # blind except statements
    "FBT", # boolean trap parameters
    "C90", # complexity metrics
    "TRY", # exception handling best practices
    "SLF", # private member access
    "TCH", # type checking issues
    "RUF", # Ruff-specific rules
    "ERA", # eradicate commented-out code
    "PL",  # pylint conventions
]
ignore = ["E501"]

[tool.ruff.lint.per-file-ignores]
"src/tests/**/*.py" = ["S101", "PLR2004"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"


[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/src/migrations"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the tzdata library which can be installed by adding
# `alembic[tz]` to the pip requirements.
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# name = "ruff"
# type = "module"
# module = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# Alternatively, use the exec runner to execute a binary found on your PATH
# name = "ruff"
# type = "exec"
# executable = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"

